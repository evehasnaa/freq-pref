من خلال لقطة الشاشة التي أرفقتها، يظهر أن لديك شرطًا معقدًا يتحقق من عدة حالات تتعلق بالأعداد d و d2. لنقم بتتبع هذا الكود (trace) خطوة بخطوة لتوضيح عمله.

محتويات الشرط:
الشرط يتكون من جزأين:

if (d != 0 && (d2 % d == 0 || d % d2 == 0)):

يتحقق مما إذا كان d لا يساوي 0.
ثم يتحقق مما إذا كان إما d2 يقبل القسمة على d بدون باقي (d2 % d == 0) أو d يقبل القسمة على d2 بدون باقي (d % d2 == 0).
if ((d != 0 && d2 % d == 0) || (d % d2 == 0)):

يتحقق مما إذا كان d لا يساوي 0 وأيضًا d2 يقبل القسمة على d.
أو يتحقق مما إذا كان d يقبل القسمة على d2 بدون باقي.
تتبع الكود:
لنقم بفهم سلوك الكود بناءً على بعض القيم التجريبية:

مثال 1:
الدخل: d = 3 و d2 = 6
التتبع:
الشرط الأول: d != 0 && (d2 % d == 0 || d % d2 == 0)
d ليس صفرًا (3 != 0) -> صحيح
d2 % d == 0 -> 6 % 3 == 0 -> صحيح
إذًا، الشرط الأول يتحقق ويطبع "YES".
الشرط الثاني: (d != 0 && d2 % d == 0) || (d % d2 == 0)
نفس الحسابات تؤدي إلى "YES".
مثال 2:
الدخل: d = 0 و d2 = 6
التتبع:
الشرط الأول: d != 0 && (d2 % d == 0 || d % d2 == 0)
d != 0 -> خطأ، إذًا الشرط كاملًا خاطئ، ولن يتم طباعة "YES".
الشرط الثاني: (d != 0 && d2 % d == 0) || (d % d2 == 0)
بما أن d يساوي 0، فإن الشرط الكامل سيكون خاطئًا لتجنب القسمة على الصفر.
الفرق بين الشرطين:
الشرطان متشابهان إلى حد كبير، لكن الثاني يحاول فصل الحالات أكثر قليلاً.
int d=t%10;
       //t/=10;
       int d2=t/10;
       if (d==0||(d2%d!=0&&d2%d!=0))
        {if ((d==0 && d2%d!=0)||d2%d!=0)
            cout <<"NO"<<endl;
        }
       else
            cout <<"YES"<<endl;










